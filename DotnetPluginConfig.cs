using System;
using SemanticRelease.Abstractions;

namespace SemanticRelease.DotNet
{
    /// <summary>
    /// Represents the configuration for the DotNet plugin within the semantic release workflow.
    /// </summary>
    /// <remarks>
    /// This configuration allows control over the behavior of the plugin during the release process,
    /// including the execution of restore, build, pack, and publish commands for .NET projects.
    /// </remarks>
    public class DotnetPluginConfig : IPluginConfig
    {
        /// <summary>
        /// Determines whether the `dotnet restore` command should be executed during the release process.
        /// </summary>
        /// <remarks>
        /// When set to true, the plugin will run the `dotnet restore` command to restore project dependencies
        /// before proceeding to subsequent steps such as build or publish. By default, this property is enabled.
        /// </remarks>
        public bool Restore { get; set; } = true;

        /// <summary>
        /// Gets or sets a value that indicates whether the build step should be executed
        /// during the release process of .NET projects.
        /// </summary>
        /// <remarks>
        /// When set to <c>true</c>, the plugin will run the "dotnet build" command for
        /// the specified solution or project as part of the release workflow. By default,
        /// this property is set to <c>true</c>.
        /// </remarks>
        public bool Build { get; set; } = true;

        /// <summary>
        /// Indicates whether the "pack" command should be executed during the release process.
        /// </summary>
        /// <remarks>
        /// If set to true, the .NET project's packages are generated using the "dotnet pack" command
        /// based on the current configuration. By default, this property is set to false, meaning
        /// the "pack" step is skipped unless explicitly enabled.
        /// </remarks>
        public bool Pack { get; set; } = false;

        /// <summary>
        /// Gets or sets a value indicating whether the 'publish' command should be executed for the .NET project.
        /// </summary>
        /// <remarks>
        /// When enabled, this command will publish the built application according to the configuration and output
        /// directory settings. This is typically used to deploy the application or make it ready for distribution.
        /// </remarks>
        public bool Publish { get; set; } = false;

        /// <summary>
        /// Gets or sets a value indicating whether to use skip flags for specific commands in the .NET build process.
        /// </summary>
        /// <remarks>
        /// When enabled, certain commands (such as "build" or "pack") will use skip flags (e.g., <c>--no-restore</c> or <c>--no-build</c>)
        /// to optimize the workflow by skipping steps that may have already been performed earlier in the process.
        /// </remarks>
        public bool UseSkipFlags { get; set; } = true;

        /// <summary>
        /// Gets or sets the .NET build configuration (e.g., "Debug" or "Release") used during
        /// the execution of restore, build, pack, and publish commands in the semantic release workflow.
        /// </summary>
        /// <remarks>
        /// This property specifies the configuration used when invoking .NET CLI commands.
        /// It plays a critical role in ensuring the commands are executed with the appropriate settings
        /// for the targeted environment or deployment scenario. The default value is "Release".
        /// </remarks>
        /// <exception cref="ArgumentException">
        /// Thrown during the validation process if the value is null or an empty string.
        /// </exception>
        public string Configuration { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the output directory for the <c>dotnet pack</c> command.
        /// </summary>
        /// <remarks>
        /// The specified directory will be used to store the package generated by the <c>dotnet pack</c> command.
        /// If not specified, the default output directory defined by the .NET CLI will be used.
        /// </remarks>
        public string? OutputDir { get; set; }

        /// <summary>
        /// Gets or sets the path or name of the solution (.sln) or project (.csproj) file to be used in the .NET commands.
        /// </summary>
        /// <remarks>
        /// This property allows you to specify a .NET solution or project file to target during the restore, build, pack, or publish operations.
        /// If not specified, the default behavior of the dotnet CLI is applied, which typically targets the solution or project in the current directory.
        /// </remarks>
        /// <exception cref="ArgumentException">
        /// Thrown during validation if the value contains invalid characters such as '*'.
        /// </exception>
        public string? SlnOrProject { get; set; }

        /// <summary>
        /// Validates the current configuration for the DotNet plugin to ensure all required properties are correctly set.
        /// </summary>
        /// <exception cref="ArgumentException">
        /// Thrown if:
        /// - The <paramref name="Configuration"/> property is null or empty.
        /// - The <paramref name="SlnOrProject"/> property contains invalid characters such as '*'.
        /// </exception>
        public void Validate()
        {
            if (Configuration.IsNullOrEmpty())
                throw new ArgumentException("Configuration must not be null.");
            if (!SlnOrProject.IsNullOrEmpty() && SlnOrProject!.Contains("*"))
                throw new ArgumentException("Solution or Project file name must not contain '*'");
        }
    }
}